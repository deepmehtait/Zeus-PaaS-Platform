{
  "name": "nice-route53",
  "description": "a nicer API to Amazon's Route53",
  "version": "0.3.4",
  "main": "nice-route53.js",
  "homepage": "https://github.com/chilts/nice-route53/",
  "repository": {
    "type": "git",
    "url": "https://github.com/chilts/nice-route53.git"
  },
  "bugs": {
    "url": "https://github.com/chilts/nice-route53/issues",
    "email": "andychilton@gmail.com"
  },
  "author": {
    "name": "Andrew Chilton",
    "email": "andychilton@gmail.com",
    "url": "http://chilts.org/"
  },
  "contributors": [],
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "awssum-amazon-route53": "1.0.x"
  },
  "devDependencies": {
    "nock": "0.22.x",
    "tape": "1.1.x"
  },
  "scripts": {
    "test": "set -e; for FILE in test/*.js; do node $FILE; done"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/chilts/nice-route53/raw/master/LICENSE"
    }
  ],
  "keywords": [
    "api",
    "amazon",
    "aws",
    "route53",
    "awssum-helper"
  ],
  "readme": "```\n       _                                _       ____ _____ \n _ __ (_) ___ ___       _ __ ___  _   _| |_ ___| ___|___ / \n| '_ \\| |/ __/ _ \\_____| '__/ _ \\| | | | __/ _ \\___ \\ |_ \\ \n| | | | | (_|  __/_____| | | (_) | |_| | ||  __/___) |__) |\n|_| |_|_|\\___\\___|     |_|  \\___/ \\__,_|\\__\\___|____/____/ \n                                                           \n```\n\nThis package provides the API you really wanted to Amazon's Route53 service. It uses AwsSum's\n[awssum-amazon-route53](https://github.com/awssum/awssum-amazon-route53) to talk to the real API.\n\n[![Build Status](https://api.travis-ci.org/chilts/nice-route53.png)](https://api.travis-ci.org/chilts/nice-route53.png)\n\n## Synopsis ##\n\n```\nvar Route53 = require('nice-route53');\n\nvar r53 = new Route53({\n    accessKeyId     : process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey : process.env.AWS_SECRET_ACCESS_KEY,\n});\n\nr53.zones(function(err, domains) {\n    console.log(domains);\n});\n```\n\n## Operations ##\n\n### .zones() ###\n\nThis operations lists all of your zones in Route53 with these credentials:\n\n```\nroute53.zones(function(err, zones) {\n    // zones is an array of zones\n    console.log(zones);\n});\n```\n\nAn example of a list of zones is:\n\n```\n[ { zoneId: 'xxxxxxxxxxxxxx',\n    name: 'chilts.org',\n    reference: 'chilts.org',\n    comment: '' },\n  { zoneId: 'xxxxxxxxxxxxxx',\n    name: 'example.com',\n    reference: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n    comment: 'Created 2013-06-14' } ]\n```\n\n### .createZone() ###\n\n```\nroute53.createZone(function(err, zone) {\n    console.log(zone);\n});\n```\n\nAn example of a new zone is:\n\n```\n{ zoneId: 'xxxxxxxxxxxxxx',\n  name: 'example.org',\n  reference: 'example.org',\n  status: 'PENDING',\n  submittedAt: '2013-06-20T03:53:19.888Z',\n  changeId: 'xxxxxxxxxxxxxx',\n  nameServers:\n   [ 'ns-xxx.awsdns-xx.org',\n     'ns-xxx.awsdns-xx.co.uk',\n     'ns-xxx.awsdns-xx.net',\n     'ns-xxx.awsdns-xx.com' ],\n  comment: 'Created 2013-06-20' }\n```\n\nCaveat: if you try to create a zone for ```example.org```, we send a ```CallerReference``` of ```example.org```. This\nis so that you will get an error if you try to create a second zone for the same domain name. If you *actually* want to\ncreate a 2nd zone for the same domain name, you should use the low-level API for ```CreateHostedZone``` that\nawssum-amazon-route53 provides - this library won't do that for you.\n\n### .zoneInfo() ###\n\nYou can either call this with a ```domainName``` or a ```zoneId```. In both cases you'll get the zone info back:\n\n```\nr53.zoneInfo('chilts.org', function(err, zoneInfo) {\n    console.log(zoneInfo);\n});\nr53.zoneInfo('xxxxxxxxxxxxx', function(err, zoneInfo) {\n    console.log(zoneInfo);\n});\n```\n\nAn example of the zoneInfo is:\n\n```\n{ zoneId: 'xxxxxxxxxxxxx',\n  name: 'example.com',\n  reference: 'example.com',\n  nameServers:\n   [ 'ns-xxx.awsdns-xx.org',\n     'ns-xxx.awsdns-xx.co.uk',\n     'ns-xxx.awsdns-xx.net',\n     'ns-xxx.awsdns-xx.com' ] }\n```\n\nIf you provide a ```zoneId``` then ```zoneInfo()``` will use the ```GetHostedZone``` operation. If you have provided a\n```domainName```, then the ```.zones()``` operation is called first, the correct zone found and then\n```GetHostedZone``` is called with the ```zoneId```.\n\n### .records() ###\n\nThis command returns a list of all of the resource records for the ```zoneId``` provided:\n\n```\nr53.records('xxxxxxxxxxxxxx', function(err, records) {\n    console.log(records);\n});\n```\n\nThe records returned look like:\n\n```\n[ { name: 'example.net.',\n    type: 'A',\n    ttl: '300',\n    values: [ '192.168.1.1' ] },\n  { name: 'example.net.',\n    type: 'NS',\n    ttl: '172800',\n    values:\n     [ 'ns-xxx.awsdns-xx.net.',\n       'ns-xxx.awsdns-xx.com.',\n       'ns-xxx.awsdns-xx.org.',\n       'ns-xxx.awsdns-xx.co.uk.' ] },\n  { name: 'example.net.',\n    type: 'SOA',\n    ttl: '900',\n    values: [ 'ns-xxx.awsdns-xx.net. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400' ] },\n  { name: 'localhost.example.net.',\n    type: 'A',\n    ttl: '604800',\n    values: [ '127.0.0.1' ] } ]\n```\n\n### .setRecord() ###\n\nThis command lets you set a record whether or not it already exists. If it exists it issues a DELETE on the old one and\na CREATE for the new one. If it doesn't already exist, then it just issues a CREATE.\n\n```\nvar args = {\n    zoneId : 'xxxxxxxxxxxxx',\n    name   : 'localhost.chilts.org',\n    type   : 'A',\n    ttl    : 600,\n    values : [\n        '127.0.0.1',\n    ],\n};\nr53.setRecord(args, function(err, res) {\n    console.log(res);\n});\n```\n\nWill give a changeset such as:\n\n```\n{ changeId: 'xxxxxxxxxxxxxx',\n  url: '/change/xxxxxxxxxxxxxx',\n  status: 'PENDING',\n  submittedAt: '2013-06-21T00:03:26.297Z' }\n```\n\n### .delRecord() ###\n\nThis command lets you delete an existing record. Nice Route53 will complain if you try and delete a resource\nrecord that doesn't exist. It will issue a DELETE on the resource record if it does exist.\n\n```\nvar args = {\n    zoneId : 'xxxxxxxxxxxxx',\n    name   : 'localhost.chilts.org',\n    type   : 'A',\n};\nr53.delRecord(args, function(err, res) {\n    console.log(res);\n});\n```\n\nWill give a changeset such as:\n\n```\n{ changeId: 'xxxxxxxxxxxxxx',\n  url: '/change/xxxxxxxxxxxxxx',\n  status: 'PENDING',\n  submittedAt: '2013-06-21T00:03:26.297Z' }\n```\n\n### .getChange() ###\n\nThis gets you a changeInfo response from a ```changeId```:\n\n```\nr53.getChange('xxxxxxxxxxxxxx', function(err, res) {\n    console.log(res);\n});\n```\n\nWill give a changeset such as:\n\n```\n{ changeId: 'xxxxxxxxxxxxxx',\n  url: '/change/xxxxxxxxxxxxxx',\n  status: 'INSYNC',\n  submittedAt: '2013-06-21T00:03:26.297Z' }\n```\n\n## Polling for Status Changes ##\n\n### .pollChangeUntilInSync() ###\n\nOnce you have called either ```.createZone()``` or ```.setRecord()```, you will have access to a ```changeId```. You\ncould do polling yourself using ```.getChange()``` or you could use this command to help you.\n\n```\nvar ee = r53.pollChangeUntilInSync(res.changeId, 10);\nee.on('attempt', function(changeInfo) {\n    console.log('Attempted a poll');\n});\nee.on('pending', function(changeInfo) {\n    console.log('Still PENDING:', changeInfo);\n});\nee.on('insync', function(changeInfo) {\n    console.log('Now INSYNC:', changeInfo);\n});\nee.on('error', function(err) {\n    console.log('error:', err);\n});\n```\n\nNote: 'attempt' is emitted once we receive the result of every ```.getChange()```, irrespective of whether the status\nis still PENDING or INSYNC. Only one of 'pending' or 'insync' is emitted after every 'attempt'.\n\n## Combining Changes with Polling ##\n\nFor the various operations which add/change/remove a zone or record, you will receive a ```changeId``` in the callback\n(if successful). If you want to, you can then poll that change until it's status is 'INSYNC'.\n\nHowever, if you'd like to do all of this with the same command, you can provide a ```pollEvery``` value (in seconds) so\nthat the operation will set it up for you.\n\nFor example, let's say you add a new zone and then poll until it is 'INSYNC', you can do this, with the equivalent new\ncall shown afterwards:\n\n```\nr53.createZone(args, function(err, zone) {\n    // error checking here\n\n    var ee = r53.pollChangeUntilInSync(zone.changeId, 10);\n    ee.on('insync', function(changeInfo) {\n        console.log('Now INSYNC:', changeInfo);\n    });\n});\n\nr53.createZone(args, 10, function(err, zone, ee) {\n    // error checking here\n\n    ee.on('insync', function(changeInfo) {\n        console.log('Now INSYNC:', changeInfo);\n    });\n});\n```\n\nIn the cases where the change operation fails (ie. ```err``` is set, then both the ```zone``` and ```ee``` will be\nundefined.\n\n\n## License ##\n\n[Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0.txt)\n\n(Ends)\n",
  "readmeFilename": "README.md",
  "_id": "nice-route53@0.3.4",
  "dist": {
    "shasum": "43c15d65c772a25b25edee4d5a091ed0bc711df4",
    "tarball": "http://registry.npmjs.org/nice-route53/-/nice-route53-0.3.4.tgz"
  },
  "_from": "nice-route53@~0.3.4",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "chilts",
    "email": "andychilton@gmail.com"
  },
  "maintainers": [
    {
      "name": "chilts",
      "email": "andychilton@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "43c15d65c772a25b25edee4d5a091ed0bc711df4",
  "_resolved": "https://registry.npmjs.org/nice-route53/-/nice-route53-0.3.4.tgz"
}
